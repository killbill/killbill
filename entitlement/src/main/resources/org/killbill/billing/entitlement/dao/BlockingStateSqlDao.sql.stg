import "org/killbill/billing/util/entity/dao/EntitySqlDao.sql.stg"

tableName() ::= "blocking_states"
historyTableName() ::= "blocking_state_history"

andCheckSoftDeletionWithComma(prefix) ::= "and <prefix>is_active = TRUE"

defaultOrderBy(prefix) ::= <<
order by <prefix>effective_date ASC, <recordIdField(prefix)> ASC
>>

tableFields(prefix) ::= <<
  <prefix>blockable_id
, <prefix>type
, <prefix>state
, <prefix>service
, <prefix>block_change
, <prefix>block_entitlement
, <prefix>block_billing
, <prefix>effective_date
, <prefix>is_active
, <prefix>created_by
, <prefix>created_date
, <prefix>updated_by
, <prefix>updated_date
>>


tableValues() ::= <<
  :blockableId
, :type
, :state
, :service
, :blockChange
, :blockEntitlement
, :blockBilling
, :effectiveDate
, :isActive
, :createdBy
, :createdDate
, :updatedBy
, :updatedDate
>>


getBlockingStateForService() ::= <<
select
<allTableFields("")>
from
<tableName()>
where blockable_id = :blockableId
and service = :service
and effective_date \<= :effectiveDate
<andCheckSoftDeletionWithComma("")>
<AND_CHECK_TENANT("")>
-- We want the current state, hence the order desc and limit 1
order by effective_date desc, record_id desc
limit 1
;
>>

getBlockingState() ::= <<
select
<allTableFields("t.")>
from
<tableName()> t
join (
  select max(record_id) record_id
        , service
        from blocking_states
        where blockable_id = :blockableId
        and type = :type
        and effective_date \<= :effectiveDate
        <andCheckSoftDeletionWithComma("")>
        and <accountRecordIdField("")> = :accountRecordId
        <AND_CHECK_TENANT("")>
        group by service
) tmp
on t.record_id = tmp.record_id
where t.type = :type
<andCheckSoftDeletionWithComma("")>
and <accountRecordIdField("t.")> = :accountRecordId
<AND_CHECK_TENANT("t.")>
<defaultOrderBy("t.")>
;
 >>

getBlockingAllUpToForAccount() ::= <<
select
<allTableFields("t.")>
from
<tableName()> t
join (
  select max(record_id) record_id
        , service
        from blocking_states
        where effective_date \<= :effectiveDate
        <andCheckSoftDeletionWithComma("")>
        and <accountRecordIdField("")> = :accountRecordId
        <AND_CHECK_TENANT("")>
        group by service
) tmp
on t.record_id = tmp.record_id
where <accountRecordIdField("t.")> = :accountRecordId
<andCheckSoftDeletionWithComma("")>
<AND_CHECK_TENANT("t.")>
<defaultOrderBy("t.")>
;
>>


getBlockingActiveForAccount() ::= <<
select
<allTableFields("bs1.")>
from
blocking_states bs1
join (
  select
   service
  , blockable_id
  , count(*)
  from
  blocking_states
  where 1=1
  and <accountRecordIdField("")> = :accountRecordId
  <AND_CHECK_TENANT("")>
  and block_billing = TRUE
  group by service, blockable_id
  having count(*) > 0) tmp
on bs1.service = tmp.service
   and bs1.blockable_id = tmp.blockable_id
where 1=1
<andCheckSoftDeletionWithComma("")>
and <accountRecordIdField("bs1.")> = :accountRecordId
<AND_CHECK_TENANT("bs1.")>
order by bs1.service, bs1.blockable_id, bs1.block_billing
;
>>

getBlockingHistoryForService() ::= <<
select
<allTableFields("")>
from
<tableName()>
where blockable_id = :blockableId
and service = :service
<andCheckSoftDeletionWithComma("")>
<AND_CHECK_TENANT("")>
<defaultOrderBy("")>
;
>>

getByBlockingIds() ::= <<
select
<allTableFields("")>
from
<tableName()>
where blockable_id in (<ids>)
<andCheckSoftDeletionWithComma("")>
<AND_CHECK_TENANT("")>
<defaultOrderBy("")>
;
>>

getByBlockingIdsIncludingDeleted() ::= <<
select
<allTableFields("")>
from
<tableName()>
where blockable_id in (<ids>)
<AND_CHECK_TENANT("")>
<defaultOrderBy("")>
;
>>


unactiveEvent() ::= <<
update
<tableName()>
set is_active = FALSE
where id = :id
<AND_CHECK_TENANT("")>
;
>>
